#!/usr/bin/env python3

import sys
import re
import operator
import csv

# ranking of errors generated by the system and the user usage statistics

def generateSysReport(errors):
    pass

def generateUserReport(users):
    keys = ["Username", "INFO", "ERROR"]
    with open("user_statistics.csv", "w") as f:
        writer = csv.DictWriter(f,fieldnames=keys)
        writer.writeheader()
        for user in sorted(users):
            writer.writerow({"Username": user, "INFO": users[user]["info"], "ERROR": users[user]["error"]})
    f.close()

def parseLogFile(filename):
    errors = {}
    users = {}

    error_pattern = r"ticky: ERROR ([\w \']*) "
    info_pattern = r"ticky: INFO ([\w \']*) "
    user_pattern = r"\(([\w\.?\w*?]*)\)$"

    try:
        with open(filename, 'r') as f:
            for line in f:
                error_match = re.search(error_pattern, line)
                user_match = re.search(user_pattern, line)
                user = user_match[1]
                if error_match is None:
                    info_match = re.search(info_pattern, line)
                    if user in users:
                        users[user]["info"] += 1
                    else:
                        users[user] = {"info": 1, "error": 0}
                else:
                    error = error_match[1]
                    if error in errors:
                        errors[error] += 1
                    else:
                        errors[error] = 1

                    if user in users:
                        users[user]["error"] += 1
                    else:
                        users[user] = {"info": 0, "error": 1}
        f.close()

    except FileNotFoundError:
        print("{} not found. Verify the log file exists".format(filename))
    
    return errors,users

def main():
    filename = sys.argv[1]
    errors,users=parseLogFile(filename)
    generateUserReport(users)
if __name__ == "__main__":
    main()
